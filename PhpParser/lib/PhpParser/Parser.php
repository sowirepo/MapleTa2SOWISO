<?php

namespace PhpParser;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Parser extends ParserAbstract
{
    protected $tokenToSymbolMapSize = 390;
    protected $actionTableSize = 1104;
    protected $gotoTableSize = 582;

    protected $invalidToken = 155;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 394;
    protected $YYNLSTATES   = 623;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_PLUS_EQUAL = 267;
    const T_MINUS_EQUAL = 268;
    const T_MUL_EQUAL = 269;
    const T_DIV_EQUAL = 270;
    const T_CONCAT_EQUAL = 271;
    const T_MOD_EQUAL = 272;
    const T_AND_EQUAL = 273;
    const T_OR_EQUAL = 274;
    const T_XOR_EQUAL = 275;
    const T_SL_EQUAL = 276;
    const T_SR_EQUAL = 277;
    const T_POW_EQUAL = 278;
    const T_COALESCE = 279;
    const T_BOOLEAN_OR = 280;
    const T_BOOLEAN_AND = 281;
    const T_IS_EQUAL = 282;
    const T_IS_NOT_EQUAL = 283;
    const T_IS_IDENTICAL = 284;
    const T_IS_NOT_IDENTICAL = 285;
    const T_SPACESHIP = 286;
    const T_IS_SMALLER_OR_EQUAL = 287;
    const T_IS_GREATER_OR_EQUAL = 288;
    const T_SL = 289;
    const T_SR = 290;
    const T_INSTANCEOF = 291;
    const T_INC = 292;
    const T_DEC = 293;
    const T_INT_CAST = 294;
    const T_DOUBLE_CAST = 295;
    const T_STRING_CAST = 296;
    const T_ARRAY_CAST = 297;
    const T_OBJECT_CAST = 298;
    const T_BOOL_CAST = 299;
    const T_UNSET_CAST = 300;
    const T_NEW = 301;
    const T_CLONE = 302;
    const T_EXIT = 303;
    const T_IF = 304;
    const T_ELSEIF = 305;
    const T_ELSE = 306;
    const T_ENDIF = 307;
    const T_LNUMBER = 308;
    const T_DNUMBER = 309;
    const T_STRING = 310;
    const T_STRING_VARNAME = 311;
    const T_VARIABLE = 312;
    const T_NUM_STRING = 313;
    const T_INLINE_HTML = 314;
    const T_CHARACTER = 315;
    const T_BAD_CHARACTER = 316;
    const T_ENCAPSED_AND_WHITESPACE = 317;
    const T_CONSTANT_ENCAPSED_STRING = 318;
    const T_ECHO = 319;
    const T_DO = 320;
    const T_WHILE = 321;
    const T_ENDWHILE = 322;
    const T_FOR = 323;
    const T_ENDFOR = 324;
    const T_FOREACH = 325;
    const T_ENDFOREACH = 326;
    const T_DECLARE = 327;
    const T_ENDDECLARE = 328;
    const T_AS = 329;
    const T_SWITCH = 330;
    const T_ENDSWITCH = 331;
    const T_CASE = 332;
    const T_DEFAULT = 333;
    const T_BREAK = 334;
    const T_CONTINUE = 335;
    const T_GOTO = 336;
    const T_FUNCTION = 337;
    const T_CONST = 338;
    const T_RETURN = 339;
    const T_TRY = 340;
    const T_CATCH = 341;
    const T_FINALLY = 342;
    const T_THROW = 343;
    const T_USE = 344;
    const T_INSTEADOF = 345;
    const T_GLOBAL = 346;
    const T_STATIC = 347;
    const T_ABSTRACT = 348;
    const T_FINAL = 349;
    const T_PRIVATE = 350;
    const T_PROTECTED = 351;
    const T_PUBLIC = 352;
    const T_VAR = 353;
    const T_UNSET = 354;
    const T_ISSET = 355;
    const T_EMPTY = 356;
    const T_HALT_COMPILER = 357;
    const T_CLASS = 358;
    const T_TRAIT = 359;
    const T_INTERFACE = 360;
    const T_EXTENDS = 361;
    const T_IMPLEMENTS = 362;
    const T_OBJECT_OPERATOR = 363;
    const T_DOUBLE_ARROW = 364;
    const T_LIST = 365;
    const T_ARRAY = 366;
    const T_CALLABLE = 367;
    const T_CLASS_C = 368;
    const T_TRAIT_C = 369;
    const T_METHOD_C = 370;
    const T_FUNC_C = 371;
    const T_LINE = 372;
    const T_FILE = 373;
    const T_COMMENT = 374;
    const T_DOC_COMMENT = 375;
    const T_OPEN_TAG = 376;
    const T_OPEN_TAG_WITH_ECHO = 377;
    const T_CLOSE_TAG = 378;
    const T_WHITESPACE = 379;
    const T_START_HEREDOC = 380;
    const T_END_HEREDOC = 381;
    const T_DOLLAR_OPEN_CURLY_BRACES = 382;
    const T_CURLY_OPEN = 383;
    const T_PAAMAYIM_NEKUDOTAYIM = 384;
    const T_NAMESPACE = 385;
    const T_NS_C = 386;
    const T_DIR = 387;
    const T_NS_SEPARATOR = 388;
    const T_ELLIPSIS = 389;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'/'",
        "'^'",
        "'*'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,   51,  154,  155,  151,   50,   32,  155,
          149,  150,   49,   44,    7,   45,   46,   47,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,   27,  146,
           38,   13,   40,   26,   63,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,   64,  155,  153,   48,  155,  152,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  147,   31,  148,   53,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   14,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   28,
           29,   30,   33,   34,   35,   36,   37,   39,   41,   42,
           43,   52,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   65,   66,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,  155,  155,   79,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  155,  155,  155,  155,  155,  155,
          136,  137,  138,  139,  140,  141,  142,  143,  144,  145
    );

    protected $action = array(
           60,   61,  404,   62,   63,-32766,-32766,-32766,-32766,   64,
           65,  219,  220,  221,  222,  223,  224,  225,  226,  627,
          227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
          237,  238,  239,-32766,-32766,-32766,-32766,-32767,-32767,-32767,
        -32767,    0,   66,   67,   58, 1054,  240,  418,  374,   68,
          598,   69,  290,  291,   70,   71,   72,   73,   74,   75,
           76,   77,   32,  300,   78,  396,  405,   35,   31,  401,
          940,  941,  445,  426, 1032,  332,  673,  342,  446,   46,
           27,  406,  127,  447,  794,  448,  473,  449,  363,  409,
          407,  216,  217,  218,   36,   37,  450,  412,  421,   38,
          451,  408,  397,   79,  727,  322,  356,  357,  319,  200,
           39,  293,  452,  453,  454,  455,  456,  698,  207,  998,
          995,  633,  699,  457,  458,  459,  460,  126,  946,  947,
          948,  949,  943,  944,  308,   83,   84,   85,  510,  473,
          950,  945,  409,  334,  679,  596,  131,   47,  306,  335,
          320,  297,  324,   40,  281,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
          101,  102,  103,  104,  105,  106,  107,  108,  892,  301,
          237,  238,  239,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766,-32767,-32767,-32767,-32767,  240,  627,  294,  217,
          218,-32766,  424,  442,-32766,-32766,-32766,  551,-32766,  403,
        -32766,  758,-32766,  751,  752,-32766,  200,  133,  422,-32766,
        -32766,-32766,  429,  728,-32766,-32766,  337,  670,-32766,  428,
          294,-32766,  472,  990,-32766, -122,-32766,-32766,-32766,-32766,
          627,  106,  107,  108,-32766,  301,  459,-32766,-32766,-32766,
          325,-32766,  355,-32766,-32766,-32766,-32766,-32766,-32766,  216,
          217,  218,-32766,-32766,-32766,  952,-32766,-32766,-32766,-32766,
        -32766,-32766,  627,  933,-32766,  472,-32766,  200,  423,-32766,
        -32766,-32766,-32766,-32766,  892,-32766, 1064,-32766, 1066, 1065,
        -32766,  216,  217,  218,-32766,-32766,-32766, 1039, 1036,-32766,
        -32766, 1061,  131,-32766,  353,  354,-32766,  472,  952,  200,
          243,  130,-32766,-32766,-32766,-32766,  892,-32766,-32766,-32766,
          767,   41,  109,  110,  111,  112,  113,  114,  115,  116,
          117,  118,  119,  120,   54,-32766,  282,-32766,-32766,-32766,
        -32766,  671,  776,  130,-32766,-32766,  627,  384,  757,  400,
        -32766,   55,  907,-32766,-32766,-32766, 1026,-32766, 1054,-32766,
          401,-32766,  832,  834,-32766,   22,  332,  296,-32766,-32766,
        -32766,  132,-32766,-32766,-32766,  794,  121,-32766,  627,   57,
        -32766,  472,-32766,  892,  401,-32766,-32766,-32766,-32766,-32766,
          332,-32766,  586,-32766,  997,  283,-32766,  208,  595,  794,
        -32766,-32766,-32766,  292,  989,-32766,-32766,  209,  697,-32766,
        -32766,-32766,-32766,  472, 1032,  892,  996,  122,-32766,-32766,
        -32766,-32767,-32767,-32767,-32767,  100,  101,  102,  103,  104,
          105,  343,  696, -395,  123,  295,-32766,-32766,-32766,-32766,
          998,-32766,-32766,-32766,  210,  627,  216,  217,  218,-32766,
        -32766,-32766,-32766,-32766,-32766,  244,-32766,  135,-32766,-32766,
        -32766,  539,  124,-32766,  200,  245,  781,-32766,-32766,-32766,
          786,-32766,-32766,-32766,  200,  218,-32766,  627,  279,-32766,
          472,-32766,  892,  307,-32766,-32766,-32766,-32766,-32766,  335,
        -32766,  200,-32766,-32766,-32766,-32766,  611,  129,  541,-32766,
        -32766,-32766, -118,  616,-32766,-32766,  431,   28,-32766,  408,
          683,-32766,  472,  408,  892,  436,  557,-32766,-32766,-32766,
          452,  453,  566,  567,  452,  453,-32766,-32766,-32766,  655,
          699,  457,  458,  655,  699,  457,  458,  134,-32766,  102,
          103,  104,  105,  599,  627,  216,  217,  218,-32766,-32766,
        -32766,-32766,-32766,-32766,  601,-32766,  608,-32766,  606,-32766,
          136,  364,-32766,  200,  241,  612,-32766,-32766,-32766,  619,
        -32766,-32766,-32766,  751,  752,-32766,  627,-32766,-32766,  472,
        -32766,  892,  692,-32766,-32766,-32766,-32766,-32766,  105,-32766,
          236,-32766,-32766,  300,-32766,  634,  603,  301,-32766,-32766,
        -32766,  584,  571,-32766,-32766,  791,  622,-32766,  408,  417,
        -32766,  472,  408,  892,  780,  615,-32766,-32766,-32766,  452,
          453,   49,   50,  452,  453,   51,   52,   53,  655,  699,
          457,  458,  655,  699,  457,  458,   56,-32766,  233,  234,
          235,  236,   59,  627,  240,  419, -170,-32766,-32766,-32766,
        -32766,-32766,-32766,  483,-32766,  484,-32766,  656,-32766,  488,
          500,-32766,  501,  583,  594,-32766,-32766,-32766,  487,-32766,
        -32766,-32766,  627,  628,-32766,  627,  644,-32766,  472,-32766,
          892, 1059,-32766,-32766,-32766,-32766,-32766,  646,-32766,  788,
        -32766,  340,  568,-32766,  578,  585,  910,-32766,-32766,-32766,
          341, 1054,-32766,-32766,  544, -167,-32766,  420,  299,-32766,
          472,-32766,-32766,-32766,  503,  663,-32766,-32766,  802,  803,
          804,  801,  800,  799,  532,  278,  416,  440,  560,-32766,
          700,-32766,-32766,-32766,-32766,-32766,-32766,  561,  694,  333,
          951,  418,  627,   82, -303,  701,-32766,  665,-32766,-32766,
        -32766,-32766,  330,-32766,  242,-32766,   42,-32766, -119,  336,
        -32766,  331,    0, -395,-32766,-32766,-32766,  321,  323,-32766,
        -32766,  211,  212,-32766, -396,  459,-32766,  472,  213,  125,
          214, -295,    0,  493,-32766,  311,  327,  365,  400,   30,
          377,  205,  591,    0, -304,    0,    0,  211,  212,  940,
          941,  408,   44,-32766,  213,   45,  214,  942,  604,  605,
          669,  682,  452,  453,  667,-32766,  660,  205,-32766,-32766,
        -32766,  655,  699,  457,  458,  940,  941,  675,  730,-32766,
          721,  722,  658,  942,  715,  713,-32766,  711,-32766,-32766,
        -32766,-32766,-32766,-32767,-32767,-32767,-32767,-32767,  597,   33,
          688,  787,  785,  674,  664,  529,  666,  946,  947,  948,
          949,  943,  944,  387,  668,  681,  672,  784,  637,  950,
          945,  638,  639,   34,  640,  777,  215,  602,-32766,  607,
          609,  529,  614,  946,  947,  948,  949,  943,  944,  387,
          617,  618,  620,-32766,  621,  950,  945,  128,   43,  627,
         1063, -118,  215,-32766,-32766, 1062,-32766,-32766,-32766,  719,
        -32766,  720,-32766,  435,-32766, 1060, 1033,-32766, 1031, 1017,
         1029,-32766,-32766,-32766,  931,  769,-32766,-32766,  408,  397,
        -32766, 1037, 1027,-32766,  472,  319,   48,   80,   81,  452,
          453,-32766,  206,  280,  288,  408,  397,  289,  633,  699,
          457,  458,  319,  302,  303,  304,  452,  453,  305,  890,
          338,  395,  408,  399,-32766,  633,  699,  457,  458,  408,
          334,-32766,-32766,  452,  453,  900,   23,  636,   24,    0,
          452,  453,  655,  699,  457,  458,  408,  334,   25,  655,
          699,  457,  458,  408,  635,  385,  902,  452,  453,  432,
          437,  439,  443,  524,  452,  453,  655,  699,  457,  458,
          408,  695,  593,  655,  699,  457,  458,  590,  893,  896,
          575,  452,  453,  899,  759,  408,  627,  956, 1032,  408,
          655,  699,  457,  458,  895,  894,  452,  453,  872,  533,
          452,  453,  686,  871,  901,  655,  699,  457,  458,  655,
          699,  457,  458,-32766,-32766,-32766,  904,  408,  903,  792,
          916,  917, 1030, 1016,    0, 1012, 1028,  930,  452,  453,
         1058,-32766,  957,-32766,-32766,-32766,-32766,  655,  699,  457,
          458, 1011,  569,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  473,    0,    0,  409,    0,    0,    0,
            0,  413,    0,  335
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   29,   30,   31,   32,   11,
           12,   29,   30,   31,   32,   33,   34,   35,   36,   74,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   29,   30,   31,   32,   33,   34,   35,
           36,    0,   44,   45,   64,   79,   64,  144,   76,   51,
          147,   53,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   65,   66,   67,   68,    7,    7,  100,
           72,   73,   74,   74,   76,  106,   78,   64,   80,   81,
           82,   83,    7,   85,  115,   87,  141,   89,    7,  144,
           92,    8,    9,   10,   96,   97,   98,   99,   27,  101,
          102,   99,  100,  105,   27,  125,  108,  109,  106,   26,
          138,  139,  110,  111,  116,  117,  118,  148,    7,  120,
          154,  119,  120,  121,  122,  127,  128,  147,  130,  131,
          132,  133,  134,  135,  136,    8,    9,   10,  125,  141,
          142,  143,  144,  141,  146,  147,  147,  149,    7,  151,
          152,   32,  154,   26,    7,   28,   29,   30,   31,   32,
           33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,   49,   50,   12,   52,
           48,   49,   50,   29,   30,   31,   32,   33,   34,   35,
           36,   68,   38,   39,   40,   41,   64,   74,   32,    9,
           10,   78,    7,    7,   81,   82,   83,   79,   85,    7,
           87,  150,   89,  128,  129,   92,   26,   64,  147,   96,
           97,   98,    7,  146,  101,  102,    7,  146,  105,   74,
           32,  108,  109,  150,   68,  150,    8,    9,   10,  116,
           74,   48,   49,   50,   78,   52,  127,   81,   82,   83,
           79,   85,    7,   87,   26,   89,   28,   29,   92,    8,
            9,   10,   96,   97,   98,  137,   68,  101,  102,  146,
          147,  105,   74,  150,  108,  109,   78,   26,    7,   81,
           82,   83,  116,   85,   12,   87,   74,   89,   76,   77,
           92,    8,    9,   10,   96,   97,   98,  150,   74,  101,
          102,  148,  147,  105,   99,  100,  108,  109,  137,   26,
           27,  145,  146,  147,  116,    8,   12,    8,    9,   10,
           76,   13,   14,   15,   16,   17,   18,   19,   20,   21,
           22,   23,   24,   25,   64,   26,   32,   28,   29,   30,
           68,  146,  146,  145,  146,  147,   74,   75,  150,  144,
           78,   64,  150,   81,   82,   83,   76,   85,   79,   87,
          100,   89,   54,   55,   92,  150,  106,    7,   96,   97,
           98,  147,   68,  101,  102,  115,   13,  105,   74,   64,
          108,  109,   78,   12,  100,   81,   82,   83,  116,   85,
          106,   87,   74,   89,   74,  151,   92,   13,   74,  115,
           96,   97,   98,   32,  153,  101,  102,   13,  148,  105,
            8,    9,  108,  109,   76,   12,  137,  147,  146,  147,
          116,   38,   39,   40,   41,   42,   43,   44,   45,   46,
           47,  151,  148,  125,  147,   32,    8,    9,   10,   68,
          120,    8,    9,   10,   13,   74,    8,    9,   10,   78,
          146,  147,   81,   82,   83,   13,   85,  147,   87,   26,
           89,  151,  147,   92,   26,   13,  148,   96,   97,   98,
          146,   68,  101,  102,   26,   10,  105,   74,  126,  108,
          109,   78,   12,   27,   81,   82,   83,  116,   85,  151,
           87,   26,   89,   29,   30,   92,   27,   27,   84,   96,
           97,   98,  150,   27,  101,  102,   69,   70,  105,   99,
           27,  108,  109,   99,   12,   69,   70,  146,  147,  116,
          110,  111,  103,  104,  110,  111,   29,   30,   31,  119,
          120,  121,  122,  119,  120,  121,  122,   27,   68,   44,
           45,   46,   47,   27,   74,    8,    9,   10,   78,  146,
          147,   81,   82,   83,   27,   85,   27,   87,  148,   89,
           94,   95,   92,   26,  126,   27,   96,   97,   98,   27,
           68,  101,  102,  128,  129,  105,   74,   29,  108,  109,
           78,   12,   32,   81,   82,   83,  116,   85,   47,   87,
           47,   89,   48,   65,   92,  146,  147,   52,   96,   97,
           98,   88,   71,  101,  102,  146,  147,  105,   99,   74,
          108,  109,   99,   12,  146,  147,  146,  147,  116,  110,
          111,   64,   64,  110,  111,   64,   64,   64,  119,  120,
          121,  122,  119,  120,  121,  122,   64,   68,   44,   45,
           46,   47,   64,   74,   64,   74,   76,   78,  146,  147,
           81,   82,   83,   74,   85,   74,   87,  148,   89,   74,
           74,   92,   74,   74,   74,   96,   97,   98,   76,   68,
          101,  102,   74,   74,  105,   74,   74,  108,  109,   78,
           12,   74,   81,   82,   83,  116,   85,   74,   87,   74,
           89,   79,   76,   92,   76,   76,   76,   96,   97,   98,
           79,   79,  101,  102,   93,   91,  105,   83,   91,  108,
          109,    8,    9,   10,   91,  146,  147,  116,  109,  110,
          111,  112,  113,  114,   91,   91,   99,   99,   93,   26,
          120,   28,   29,   30,   31,   32,   68,  106,  145,  107,
          137,  144,   74,  147,  140,  120,   78,  146,  147,   81,
           82,   83,  123,   85,   27,   87,  126,   89,  150,  123,
           92,  124,   -1,  125,   96,   97,   98,  125,  125,  101,
          102,   44,   45,  105,  125,  127,  108,  109,   51,  126,
           53,  140,   -1,  144,  116,  140,  140,  140,  144,  149,
          140,   64,  140,   -1,  140,   -1,   -1,   44,   45,   72,
           73,   99,  146,   76,   51,  146,   53,   80,  146,  146,
          146,  146,  110,  111,  146,  147,  146,   64,    8,    9,
           10,  119,  120,  121,  122,   72,   73,  146,  146,   76,
          146,  146,  146,   80,  146,  146,   26,  146,   28,   29,
           30,   31,   32,   33,   34,   35,   36,   37,  147,  149,
          148,  146,  146,  146,  146,  128,  146,  130,  131,  132,
          133,  134,  135,  136,  146,  146,  146,  146,  146,  142,
          143,  146,  146,  149,  146,  146,  149,  147,  151,  147,
          147,  128,  147,  130,  131,  132,  133,  134,  135,  136,
          147,  147,  147,   68,  147,  142,  143,  147,  149,   74,
          148,  150,  149,   78,  151,  148,   81,   82,   83,  148,
           85,  148,   87,  148,   89,  148,  148,   92,  148,  148,
          148,   96,   97,   98,  148,  148,  101,  102,   99,  100,
          105,  148,  148,  108,  109,  106,  149,  149,  149,  110,
          111,  116,  149,  149,  149,   99,  100,  149,  119,  120,
          121,  122,  106,  149,  149,  149,  110,  111,  149,  152,
          149,  149,   99,  149,  149,  119,  120,  121,  122,   99,
          141,  146,  147,  110,  111,  153,  150,  148,  150,   -1,
          110,  111,  119,  120,  121,  122,   99,  141,  150,  119,
          120,  121,  122,   99,  148,  150,  153,  110,  111,  150,
          150,  150,  150,  150,  110,  111,  119,  120,  121,  122,
           99,  148,   86,  119,  120,  121,  122,  150,  148,  150,
           90,  110,  111,  150,  150,   99,   74,  150,   76,   99,
          119,  120,  121,  122,  150,  148,  110,  111,  150,  150,
          110,  111,  148,  150,  153,  119,  120,  121,  122,  119,
          120,  121,  122,    8,    9,   10,  153,   99,  153,  148,
          153,  109,  153,  153,   -1,  153,  153,  153,  110,  111,
          153,   26,  153,   28,   29,   30,   31,  119,  120,  121,
          122,  153,  153,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,  141,   -1,   -1,  144,   -1,   -1,   -1,
           -1,  149,   -1,  151
    );

    protected $actionBase = array(
            0,  829,  846,    2,  509,  410,  414,  930,  513,  702,
          863,  870,  926,  887,  894,  911,  958,  958,  958,  958,
          958,  527,  529,  538,  542,  538,  516,   -2,   -2,   -2,
          198,  166,  371,  371,  123,  371,  569,  601,  668,  272,
          470,  304,  403,  502,  502,  502,  502,  825,  825,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  502,  502,  502,  502,  502,   77,  707,  653,
          630,  708,  710,  718,  719,  884,  634,  888,  767,  768,
          510,  770,  771,  772,  776,  777,  765,  783,  929,  784,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  307,  438,   83,  283,  251,  402,  537,  537,  537,
          537,  537,  537,  428,  428,  428,  428,  428,  428,  428,
          428,  428,  428,  428,  428,  428,  428,  428,  428,  190,
          727,  433,  433,  433,  465,  753,  753,  753,  753,  753,
          753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
          753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
          753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
          753,  753,  753,  753,  753,  753,  448,  228,  -18,  -18,
          309,  548, 1045,  464,  703,  810,  810,  810,  810,  810,
          497,  -24,    4,    4,    4,    4,  308,  383,  383,  383,
          383,  154,  154,  154,  154,  -31,  260,  284,  119,  119,
          648,  648,  528,  750,  495,  495,  594,  594,  952,  952,
          952,  952,  952,  952,  952,  952,  952,  952,  570,  590,
          815,  815,   85,   85,   85,   85,  445,  445,  171,  279,
          -34,   -1,  541,  541,  541,  543,  543,  543,  318,  205,
          612,  224,  224,  224,  621,  603,  622,  155,  193,  132,
          -55,  -55,  -55,  -55,  -97,  596,  -55,  -55,  -55,  287,
          -28,  -28,  212,  310,  611,  761,  635,  763,  468,  654,
          -20,  544,  544,  644,  644,  644,  244,  627,  437,  446,
          419,  641,   71,  244,   77,  320,  459,  315,  720,  588,
          728,  722,   81,  195,   13,  449,  270,  280,  215,  725,
          726,  889,  893,  147,  153,  649,   61,  128,  270,  352,
          729,  196,  202,  721,  324,  550,  724,  581,  640,  586,
          598,  581,  616,  550,  787,  787,  787,  787,  550,  598,
          640,  640,  550,  528,  640,   60,  550,  629,  598,  636,
          787,  662,  663,  581,  592,  637,  640,  640,  640,  586,
          550,  787,  631,  593,  111,  640,  787,  456,  456,  631,
          550,  456,  616,  456,   41,  483,  557,  749,  788,  814,
          579,  701,  610,  625,  795,  798,  789,  585,  535,  794,
          700,  639,  664,  571,  363,  558,  561,  562,  563,  645,
          572,  642,  627,  597,  545,  638,  646,  638,  822,  650,
          604,  643,  624,  665,  384,  639,  623,  394,  730,  639,
          869,  845,  807,  599,  804,  853,  638,  843,  656,   75,
          431,  805,  633,  602,  638,  806,  638,  732,  638,  873,
          607,  752,  639,  545,  545,  874,  891,  903,  905,  907,
          909,  910,  912,  913,  578,  914,  670,  849,  141,  793,
          641,  647,  613,  681,  219,  917,  638,  638,  733,  596,
          638,  682,  659,  826,  684,  850,  580,  580,  580,  580,
          919,  603,  851,  638,  628,  928,  219,  469,  531,  608,
          685,  812,  618,  877,  580,  580,  811,  735,  442,  757,
          476,  686,  828,  838,  751,  688,  743,  744,  452,  589,
          620,  619,  745,  809,  689,  867,  614,  652,  632,  617,
          747,  615,  852,  691,  705,  706,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
            0,    0,    0,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  127,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  127,  -18,  -18,  -18,  -18,  127,
          -18,  -18,  -18,  -18,  -18,  -18,  127,  127,  127,  127,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  -18,  952,  127,  127,  127,  -18,  952,  952,
          952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
          952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
          952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
          952,  952,  952,  952,  952,  952,  952,  952,  952,  -18,
          127,    0,    0,  127,  -18,  127,  -18,  127,  127,  127,
          127,  127,  127,  -18,  -18,  -18,  -18,  -18,  -18,    0,
          193,  193,  193,  193,  -18,  -18,  -18,  -18,  609,  609,
          609,  952,  952,  952,  952,  952,  952,  193,  193,  132,
          132,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  609,  609,  952,  952,  -55,  -55,  -55,  -55,  -55,
          -55,  -28,  -28,  -28,  280,  193,  193,  193,  132,  132,
          132,  -55,  598,  -28,  338,  338,  338,  -28,  -28,  -28,
          280,    0,    0,    0,    0,    0,    0,  598,  338,    0,
            0,    0,  640,    0,    0,    0,  338,  466,  466,  466,
          466,  219,  270,    0,  193,  132,  598,  598,  598,    0,
          592,    0,    0,    0,  640,    0,    0,    0,    0,    0,
            0,   75,  804,  271,  245,    0,    0,    0,    0,    0,
            0,    0,  245,  245,  360,  360,    0,    0,  578,    0,
            0,    0,    0,  271,    0,    0,  219
    );

    protected $actionDefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  111,  103,  117,  102,
          113,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  422,  422,32767,  379,32767,32767,32767,32767,
        32767,32767,32767,  188,  188,  188,32767,32767,32767,  411,
          411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
        32767,32767,32767,32767,32767,  269,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  274,
          427,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          250,  251,  253,  254,  187,  412,  139,  275,  426,  186,
          141,  215,  383,32767,32767,32767,  217,   26,  150,   95,
          382,  185,  126,  268,  216,  192,  197,  198,  199,  200,
          201,  202,  203,  204,  205,  206,  207,  208,  191,  338,
        32767,  247,  246,  245,  340,  376,  376,  379,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  339,  213,  365,  364,
          214,  336,  218,  337,  219,  235,  236,  233,  234,  237,
          341,  342,  358,  359,  356,  357,  190,  238,  239,  240,
          241,  360,  361,  362,  363,  172,  172,  172,32767,32767,
          421,  421,32767,32767,  227,  228,  349,  350,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  173,32767,
        32767,32767,  130,  130,  130,  130,  130,32767,32767,32767,
        32767,32767,  221,  222,  220,  344,  345,  343,32767,32767,
          312,32767,32767,32767,32767,32767,  314,32767,  225,  347,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  384,
          313,32767,32767,32767,32767,32767,32767,32767,32767,  397,
          301,  223,  351,32767,32767,32767,32767,  294,  114,  116,
           64,  368,32767,32767,32767,32767,32767,  402,32767,32767,
        32767,32767,32767,32767,  434,32767,  397,32767,32767,32767,
        32767,32767,32767,32767,32767,  244,32767,32767,  401,  395,
        32767,32767,32767,32767,32767,   68,  309,32767,  315,32767,
        32767,32767,32767,   68,32767,32767,32767,32767,   68,32767,
          400,  399,   68,32767,  295,  378,   68,   81,32767,   79,
        32767,  100,  100,32767,32767,   83,  374,  390,32767,32767,
           68,32767,  283,   70,  378,32767,32767,  132,  132,  283,
           68,  132,32767,  132,32767,    4,  319,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  296,32767,32767,32767,  265,  266,  371,  386,32767,
          387,32767,  294,32767,  231,  210,32767,  212,32767,32767,
          299,  302,32767,32767,32767,    6,   20,  149,32767,  297,
        32767,  195,32767,32767,32767,32767,  429,32767,32767,  189,
        32767,32767,   22,32767,  145,32767,   66,32767,  419,32767,
        32767,  395,  298,  224,  226,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  396,32767,32767,32767,  121,32767,
          332,32767,32767,32767,   82,32767,  193,  140,32767,32767,
          428,32767,32767,32767,32767,32767,  352,  353,  354,  355,
        32767,32767,32767,   67,32767,32767,   84,32767,32767,  395,
        32767,32767,32767,32767,  346,  348,32767,32767,  184,32767,
        32767,32767,32767,32767,  395,32767,32767,32767,  125,32767,
        32767,32767,32767,32767,32767,32767,    4,32767,  166,32767,
        32767,32767,32767,32767,32767,32767,   28,   28,    3,   28,
          108,   28,  152,    3,  100,  100,   61,  152,   28,  152,
           28,   28,   28,   28,   28,  159,   28,   28,   28,   28,
           28,   28,   28
    );

    protected $goto = array(
          166,  166,  140,  140,  145,  140,  141,  142,  143,  148,
          150,  185,  168,  164,  164,  164,  164,  145,  145,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          160,  161,  162,  163,  183,  139,  852,  853,  474,  855,
          878,  879,  880,  881,  882,  883,  884,  886,  819,  144,
          146,  147,  149,  171,  176,  184,  201,  247,  250,  252,
          254,  255,  256,  257,  258,  259,  267,  268,  269,  270,
          284,  285,  312,  313,  314,  328,  351,  513,  514,  186,
          187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
          197,  198,  151,  152,  153,  167,  154,  169,  155,  202,
          170,  156,  157,  158,  203,  159,  137,  530,  743,  743,
         1043, 1043,  530,  530,  530,  530,  530,  530,  530,  530,
          530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
          530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
          530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
          530,  530,  530,  476,  476,  476,  476,  476,  476, 1022,
         1022, 1053, 1053,  476,  476,  476,  476,  476,  476,  476,
          476,  476,  476,  677,    1,  479,  479, 1056, 1053,    2,
         1038, 1038, 1038,  542,  572,  414,  414,  414,  414,  414,
          414,  761, 1056, 1056, 1021,  414,  414,  414,  414,  414,
          414,  414,  414,  414,  414, 1023, 1023,  918,  918,  750,
          750,  750,  750,  750,  750,  491,  389,  574,  508,  508,
          536,  504,  631,  631,  631,  587,  506,  506,  475,  477,
          496,  511,  537,  540,  553,  559,  509,  708,  708,  708,
          708,  531, 1047,  703,  709,  581,  531,  531,  531,  531,
          531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
          531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
          531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
          531,  531,  531,  531,  531,  531,  531,  953,  632,  632,
          632,  368,  953,  953,  953,  953,  953,  953,  953,  953,
          953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
          953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
          953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
          953,  953,  953,  375,  577,  174,  345,  582,  276,  366,
          277,  480,  480,  177,  178,  179,  546,  547,  548,  549,
          173,  199,  204,  246,  251,  253,  260,  261,  262,  263,
          264,  265,  271,  272,  273,  274,  286,  287,  315,  316,
          317,  329,  352,  564,  565,  175,  180,  248,  249,  181,
          182,    5,  326,   16, 1015,    6,  310,  630,  630,  630,
          798,  394,    7,  563,   17,   18,    8,   19,    9,  502,
           20,   10,   11,   12,   13,   14,   15,  729,  714,  712,
          710,  712,  600,  482,  738,  733,  516,  517,  518,  519,
          520,  521,  522,  523,  525,  555,  485,  369,  934,  481,
          481,  494,  376,  376,  376,  505,  875,   26,   21,  362,
          515,  485, 1003,  939,  490,  573,  376,  929,  928,  433,
          817, 1040,  526,  382,  388,  914,  915,  490,  490,  579,
          485,  485,  485,   29,  545,  552,  592,  641,  570,  379,
          380,  912, 1014,  912,  556,  348,  393,  865,  747,  610,
          913,  756,  765,  954,  390,  909,  647,  717,  770, 1000,
          441,  806,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,  485,    0,    0,
            0,    0,    0,    0,    0,    0,  489,    0,  346,  347,
            0,    0,    0,    0,    0,  512,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  495
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   39,   56,   56,
           56,   56,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   94,   94,   94,   94,   94,   94,   96,
           96,  119,  119,   94,   94,   94,   94,   94,   94,   94,
           94,   94,   94,   32,    2,   94,   94,  119,  119,    2,
           96,   96,   96,   22,   22,   39,   39,   39,   39,   39,
           39,   63,  119,  119,   96,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   95,   95,   39,   39,   39,
           39,   39,   39,   39,   39,   79,   33,   33,   33,   33,
           33,   33,    7,    7,    7,   39,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   87,   39,   39,   39,
           39,   97,  118,   39,   39,   39,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,  104,    8,    8,
            8,   29,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,    5,   43,   13,   51,   43,   47,   43,
           47,   97,   97,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   14,  103,   14,   61,   14,  103,    6,    6,    6,
           76,   76,   14,  106,   14,   14,   14,   14,   14,    5,
           14,   14,   14,   14,   14,   14,   14,    6,    6,    6,
            6,    6,    6,    6,    6,    6,   88,   88,   88,   88,
           88,   88,   88,   88,   88,   88,    4,   40,   16,  100,
          100,   40,  101,  101,  101,   40,   16,   16,   16,   16,
           26,    4,  110,   61,   26,   31,  101,  102,  102,   40,
           79,  116,   16,   30,  101,   61,   61,   26,   26,   40,
            4,    4,    4,   16,   42,   42,   42,   11,   16,    9,
            9,   61,   61,   61,   49,   49,   49,   80,   58,   53,
           61,   60,   64,  105,   10,   92,   12,   50,   65,  109,
           86,   78,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,   51,   51,
           -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   79
    );

    protected $gotoBase = array(
            0,    0, -424,    0,  107,   -1,  386,  221,  287,  116,
           83,  112,   63,  135, -216,    0,   32,    0,    0,    0,
            0,    0,  139,    0,    0,  -30,  410,    0,    0,  245,
          164,  166,  148,  -62,    0,    0,    0,    0,    0,  -93,
           19,    0,  161, -104,    0,    0,    0, -269,    0,  143,
           58,  -86,    0,  115,    0,    0, -170,    0,  172,    0,
          174,   45,    0,  160,  119,   64,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,   92,    0,   49,  168,
          176,    0,    0,    0,    0,    0,   51,  203,  366,    0,
            0,    0,   82,    0, -125,  -95, -141,   41,    0,    0,
          129,  111,  125,   62,   87,  118,  187,    0,    0,   55,
          235,    0,    0,    0,    0,    0,  170,    0,  207, -148,
            0
    );

    protected $gotoDefault = array(
        -32768,  444,    3,  625,  461,  486,  652,  653,  654,  371,
          370,  642,  648,  172,    4,  650,  866,  358,  657,  359,
          558,  659,  498,  661,  662,  138,  462,  372,  373,  499,
          381,  543,  676,  266,  378,  678,  360,  680,  685,  361,
          580,  562,  527,  576,  463,  425,  538,  275,  507,  534,
          716,  344,  724,  613,  732,  735,  464,  528,  746,  430,
          754,  911,  386,  760,  766,  771,  774,  402,  391,  554,
          778,  779,  318,  783,  588,  589,  797,  298,  805,  818,
          398,  885,  887,  465,  466,  492,  438,  478,  497,  467,
          905,  392,  908,  468,  469,  410,  411,  926,  923,  350,
         1008,  349,  427,  309,  993,  992,  550,  958,  434, 1046,
         1004,  339,  470,  471,  367,  383, 1041,  415, 1048, 1055,
          535
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    9,    9,
           11,   11,   11,   11,   10,   10,   12,   14,   14,   15,
           15,   15,   15,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,   36,   36,   38,   37,   37,   30,   30,   40,   40,
           41,   41,    7,    8,    8,    8,   44,   44,   44,   45,
           45,   48,   48,   46,   46,   49,   49,   23,   23,   32,
           32,   35,   35,   34,   34,   50,   24,   24,   24,   24,
           51,   51,   52,   52,   53,   53,   21,   21,   17,   17,
           54,   19,   19,   55,   18,   18,   20,   20,   31,   31,
           31,   42,   42,   57,   57,   58,   58,   60,   60,   60,
           59,   59,   43,   43,   61,   61,   61,   62,   62,   63,
           63,   63,   27,   27,   64,   64,   64,   28,   28,   65,
           65,   47,   47,   66,   66,   66,   66,   71,   71,   72,
           72,   73,   73,   73,   73,   74,   75,   75,   70,   70,
           67,   67,   69,   69,   77,   77,   76,   76,   76,   76,
           76,   76,   68,   68,   78,   78,   29,   29,   22,   22,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   16,   16,   26,   26,   83,   83,   84,   84,
           84,   84,   79,   86,   86,   91,   91,   92,   93,   93,
           93,   93,   93,   93,   97,   97,   39,   39,   39,   80,
           80,   98,   98,   94,   94,   99,   99,   99,   99,   81,
           81,   81,   85,   85,   85,   90,   90,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
           13,   13,   13,   13,   13,   13,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,   89,   89,
           82,   82,   82,   82,  105,  105,  106,  106,  109,  109,
          108,  108,  110,  110,   33,   33,   33,   33,  112,  112,
          111,  111,  111,  111,  111,  113,  113,   96,   96,  100,
          100,   95,   95,  114,  114,  114,  114,  101,  101,  101,
          101,   88,   88,  102,  102,  102,   56,  115,  115,  116,
          116,  116,   87,   87,  117,  117,  118,  118,  118,  118,
          103,  103,  103,  103,  119,  119,  119,  119,  119,  119,
          119,  120,  120,  120
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    4,    3,    3,    1,
            1,    3,    2,    4,    3,    1,    3,    2,    0,    1,
            1,    1,    1,    3,    5,    8,    3,    5,    9,    3,
            2,    3,    2,    3,    2,    3,    2,    3,    3,    3,
            1,    2,    5,    7,    9,    5,    1,    6,    3,    3,
            2,    0,    2,    8,    0,    4,    1,    3,    0,    1,
            0,    1,   10,    7,    6,    5,    1,    2,    2,    0,
            2,    0,    2,    0,    2,    1,    3,    1,    4,    1,
            4,    1,    4,    1,    3,    3,    3,    4,    4,    5,
            0,    2,    4,    3,    1,    1,    1,    4,    0,    2,
            3,    0,    2,    4,    0,    2,    0,    3,    1,    2,
            1,    1,    0,    1,    3,    4,    6,    1,    1,    1,
            0,    1,    0,    2,    2,    3,    3,    1,    3,    1,
            2,    2,    3,    1,    1,    2,    4,    3,    1,    1,
            3,    2,    0,    3,    3,    9,    3,    1,    3,    0,
            2,    4,    5,    4,    4,    3,    1,    1,    1,    3,
            1,    1,    0,    1,    1,    2,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    3,    3,    1,    0,    1,
            1,    3,    3,    4,    4,    1,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    1,    3,    5,    4,    3,    4,    4,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    2,    1,    1,    1,    3,    2,    1,
           10,   11,    3,    3,    2,    4,    4,    3,    4,    4,
            4,    4,    3,    0,    4,    1,    3,    2,    2,    4,
            6,    2,    2,    4,    1,    1,    1,    2,    3,    1,
            1,    1,    1,    1,    1,    3,    3,    4,    4,    0,
            2,    1,    0,    1,    1,    0,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
            1,    3,    1,    4,    3,    1,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    2,    2,    2,    2,    3,    3,    3,    3,
            3,    3,    3,    3,    5,    4,    4,    3,    1,    3,
            1,    1,    3,    3,    1,    1,    0,    2,    0,    1,
            3,    1,    3,    1,    1,    1,    1,    1,    6,    4,
            3,    4,    2,    4,    4,    1,    3,    1,    2,    1,
            1,    4,    1,    3,    6,    4,    4,    4,    4,    1,
            4,    0,    1,    1,    3,    1,    4,    3,    1,    1,
            1,    0,    0,    2,    3,    1,    3,    1,    4,    2,
            2,    2,    1,    2,    1,    4,    3,    3,    3,    6,
            3,    1,    1,    1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1($attributes) {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule2($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule3($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule4($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule5($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule6($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule7($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule8($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule9($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule10($attributes) {
         $this->semValue = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $attributes); 
    }

    protected function reduceRule11($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $attributes); 
    }

    protected function reduceRule12($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule13($attributes) {
         $this->semValue = new Node\Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule14($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Node\Stmt\Use_::TYPE_NORMAL, $attributes); 
    }

    protected function reduceRule15($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_FUNCTION, $attributes); 
    }

    protected function reduceRule16($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_CONSTANT, $attributes); 
    }

    protected function reduceRule17($attributes) {
         $this->semValue = new Node\Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule18($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule19($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule20($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function reduceRule21($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule22($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule23($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule24($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule25($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule26($attributes) {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule27($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule28($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule29($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule30($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule31($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule32($attributes) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope'); 
    }

    protected function reduceRule33($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule34($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(5-2)], array('stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]), $attributes); 
    }

    protected function reduceRule35($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(8-2)], array('stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]), $attributes); 
    }

    protected function reduceRule36($attributes) {
         $this->semValue = new Node\Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule37($attributes) {
         $this->semValue = new Node\Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $attributes); 
    }

    protected function reduceRule38($attributes) {
         $this->semValue = new Node\Stmt\For_(array('init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule39($attributes) {
         $this->semValue = new Node\Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule40($attributes) {
         $this->semValue = new Node\Stmt\Break_(null, $attributes); 
    }

    protected function reduceRule41($attributes) {
         $this->semValue = new Node\Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule42($attributes) {
         $this->semValue = new Node\Stmt\Continue_(null, $attributes); 
    }

    protected function reduceRule43($attributes) {
         $this->semValue = new Node\Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule44($attributes) {
         $this->semValue = new Node\Stmt\Return_(null, $attributes); 
    }

    protected function reduceRule45($attributes) {
         $this->semValue = new Node\Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule46($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule47($attributes) {
         $this->semValue = new Node\Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule48($attributes) {
         $this->semValue = new Node\Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule49($attributes) {
         $this->semValue = new Node\Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule50($attributes) {
         $this->semValue = new Node\Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule51($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule52($attributes) {
         $this->semValue = new Node\Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $attributes); 
    }

    protected function reduceRule53($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function reduceRule54($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], array('keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule55($attributes) {
         $this->semValue = new Node\Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule56($attributes) {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule57($attributes) {
         $this->semValue = new Node\Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule58($attributes) {
         $this->semValue = new Node\Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule59($attributes) {
         $this->semValue = new Node\Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule60($attributes) {
         $this->semValue = new Node\Stmt\Label($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule61($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule62($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule63($attributes) {
         $this->semValue = new Node\Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $attributes); 
    }

    protected function reduceRule64($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule65($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule66($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule67($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule68($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule69($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule70($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule71($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule72($attributes) {
         $this->semValue = new Node\Stmt\Function_($this->semStack[$this->stackPos-(10-3)], array('byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule73($attributes) {
         $this->semValue = new Node\Stmt\Class_($this->semStack[$this->stackPos-(7-2)], array('type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), $attributes); 
    }

    protected function reduceRule74($attributes) {
         $this->semValue = new Node\Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], array('extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]), $attributes); 
    }

    protected function reduceRule75($attributes) {
         $this->semValue = new Node\Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule76($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule77($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule78($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule79($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule80($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule81($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule82($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule83($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule84($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule85($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule86($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule87($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule88($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule89($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule90($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule91($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule92($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule93($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule94($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule95($attributes) {
         $this->semValue = new Node\Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule96($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule97($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule98($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule99($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule100($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule101($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule102($attributes) {
         $this->semValue = new Node\Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule103($attributes) {
         $this->semValue = new Node\Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule104() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule105() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule106($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule107($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule108($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule109($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule110($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $attributes); 
    }

    protected function reduceRule111($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule112($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule113($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule114($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule115($attributes) {
         $this->semValue = new Node\Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $attributes); 
    }

    protected function reduceRule116($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule117($attributes) {
         $this->semValue = new Node\Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule118($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule119($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true); 
    }

    protected function reduceRule120($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule121($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule122($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule123($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule124($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule125($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule126($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $attributes); 
    }

    protected function reduceRule127($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule128($attributes) {
         $this->semValue = 'array'; 
    }

    protected function reduceRule129($attributes) {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule130($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule131($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule132($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule133($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule134($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule135($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule136($attributes) {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $attributes)); 
    }

    protected function reduceRule137($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule138($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule139($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $attributes); 
    }

    protected function reduceRule140($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $attributes); 
    }

    protected function reduceRule141($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $attributes); 
    }

    protected function reduceRule142($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule143($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule144($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule145($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule146($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule147($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule148($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule149($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule150($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule151($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule152($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule153($attributes) {
         $this->semValue = new Node\Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule154($attributes) {
         $this->semValue = new Node\Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule155($attributes) {
         $this->semValue = new Node\Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], array('type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule156($attributes) {
         $this->semValue = new Node\Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule157($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule158($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule159($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule160($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule161($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule162($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule163($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $attributes); 
    }

    protected function reduceRule164($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule165($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]); 
    }

    protected function reduceRule166($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule167($attributes) {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule168($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule169($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule170($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule171($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule172($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule173($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule174($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule175($attributes) {
         Node\Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule176($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule177($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule178($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule179($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule180($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule181($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule182($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule183($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule184($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule185($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule186($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule187($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule188($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule189($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule190($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule191($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule192($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule193($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule194($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule195($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule196($attributes) {
         $this->semValue = new Node\Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule197($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule198($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule199($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule200($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule201($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule202($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule203($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule204($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule205($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule206($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule207($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule208($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule209($attributes) {
         $this->semValue = new Node\Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule210($attributes) {
         $this->semValue = new Node\Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule211($attributes) {
         $this->semValue = new Node\Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule212($attributes) {
         $this->semValue = new Node\Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule213($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule214($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule215($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule216($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule217($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule218($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule219($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule220($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule221($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule222($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule223($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule224($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule225($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule226($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule227($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule228($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule229($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule230($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule231($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule232($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule233($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule234($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule235($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule236($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule237($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule238($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule239($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule240($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule241($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule242($attributes) {
         $this->semValue = new Node\Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule243($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule244($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule245($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule246($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule247($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule248($attributes) {
         $this->semValue = new Node\Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule249($attributes) {
         $this->semValue = new Node\Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule250($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $attributes); 
    }

    protected function reduceRule251($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $attributes); 
    }

    protected function reduceRule252($attributes) {
         $this->semValue = new Node\Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule253($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $attributes); 
    }

    protected function reduceRule254($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $attributes); 
    }

    protected function reduceRule255($attributes) {
         $this->semValue = new Node\Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule256($attributes) {
         $this->semValue = new Node\Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule257($attributes) {
         $this->semValue = new Node\Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule258($attributes) {
         $this->semValue = new Node\Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule259($attributes) {
         $this->semValue = new Node\Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule260($attributes) {
         $this->semValue = new Node\Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule261($attributes) {
         $this->semValue = new Node\Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule262($attributes) {
         $this->semValue = new Node\Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule263($attributes) {
         $this->semValue = new Node\Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule264($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule265($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule266($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule267($attributes) {
         $this->semValue = new Node\Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule268($attributes) {
         $this->semValue = new Node\Expr\Print_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule269($attributes) {
         $this->semValue = new Node\Expr\Yield_(null, null, $attributes); 
    }

    protected function reduceRule270($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule271($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]), $attributes); 
    }

    protected function reduceRule272($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule273($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule274($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule275($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $attributes); 
    }

    protected function reduceRule276($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule277($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule278($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule279($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(4-1)]), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule280($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule281($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule282($attributes) {
         $this->semValue = new Node\Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule283($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule284($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule285($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule286($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule287($attributes) {
         $this->semValue = new Node\Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule288($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule289($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule290($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule291($attributes) {
        
            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $attributes), $this->semStack[$this->stackPos-(2-2)], $attributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Node\Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $attributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function reduceRule292($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule293($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule294($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule295($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule296($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule297($attributes) {
         $this->semValue = new Node\Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule298($attributes) {
         $this->semValue = new Node\Name\Relative($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule299($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule300($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule301($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule302($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule303($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule304($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule305($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule306($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule307($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule308($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule309($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule310($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule311($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule312($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule313($attributes) {
         $this->semValue = array(Node\Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`')); 
    }

    protected function reduceRule314($attributes) {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule315($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule316($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule317($attributes) {
         $this->semValue = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule318($attributes) {
         $this->semValue = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule319($attributes) {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule320($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Line($attributes); 
    }

    protected function reduceRule321($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\File($attributes); 
    }

    protected function reduceRule322($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Dir($attributes); 
    }

    protected function reduceRule323($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Class_($attributes); 
    }

    protected function reduceRule324($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Trait_($attributes); 
    }

    protected function reduceRule325($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Method($attributes); 
    }

    protected function reduceRule326($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Function_($attributes); 
    }

    protected function reduceRule327($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Namespace_($attributes); 
    }

    protected function reduceRule328($attributes) {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function reduceRule329($attributes) {
         $this->semValue = new Node\Scalar\String_('', $attributes); 
    }

    protected function reduceRule330($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule331($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule332($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule333($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule334($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule335($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule336($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule337($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule338($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule339($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule340($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule341($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule342($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule343($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule344($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule345($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule346($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule347($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule348($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule349($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule350($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule351($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule352($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule353($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule354($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule355($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule356($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule357($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule358($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule359($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule360($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule361($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule362($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule363($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule364($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule365($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule366($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule367($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule368($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule369($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule370($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule371($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule372($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '"'); } }; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule373($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule374($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule375($attributes) {
         $this->semValue = 'class'; 
    }

    protected function reduceRule376($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule377($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule378() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule379() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule380($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule381($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule382($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule383($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule384($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule385($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule386($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule387($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule388($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule389($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule390($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule391($attributes) {
         $this->semValue = new Node\Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule392($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule393($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule394($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule395($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule396($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule397($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule398($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule399($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule400($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule401($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule402($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule403($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $attributes); 
    }

    protected function reduceRule404($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule405($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule406($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule407($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule408($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule409($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule410($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule411($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule412($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule413($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule414($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule415($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule416($attributes) {
         $this->semValue = new Node\Expr\List_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule417($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule418($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule419($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule420($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule421($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule422($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule423($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule424($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule425($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule426($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule427($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule428($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $attributes); 
    }

    protected function reduceRule429($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $attributes); 
    }

    protected function reduceRule430($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule431($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule432($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule433($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule434($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule435($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule436($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $attributes), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule437($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule438($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule439($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(6-2)], $attributes), $this->semStack[$this->stackPos-(6-4)], $attributes); 
    }

    protected function reduceRule440($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule441($attributes) {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule442($attributes) {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule443($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }
}
